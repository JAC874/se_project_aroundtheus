!function(){"use strict";class e{constructor(e,t,s,r,i){this.name=e.name,this.link=e.link,this._cardSelector=t,this._handleImageClick=s,this._cardID=e._id,this._handleDeleteCard=r,this._handleLikeButton=i,this.isLiked=e.isLiked}_setEventListeners(){this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this.isLiked&&this._likeButton.classList.add("card__like-button_active"),this._likeButton.addEventListener("click",(e=>{e.preventDefault(),this._toggleLike()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard(this._cardID,this._cardElement)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this.name,this.link)}))}_toggleLike(){this._handleLikeButton(this._cardID,this.isLiked).then((e=>{this.isLiked=e,this._updateLikeButton()})).catch((e=>console.error("Error toggling like:",e)))}_updateLikeButton(){this.isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._cardImageEl.src=this.link,this._cardImageEl.alt=this.name,this._cardTitleEl.textContent=this.name,this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageEl.textContent="",this._errorMessageEl.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._hasInvalidInput(this._inputEls)?this.disableButton():this._enableButton()}_setEventListeners(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(e)})),this._setEventListeners(),this._toggleButtonState()}resetValidation(){this._toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)}))}}class s{constructor(e,t){let{items:s,renderer:r}=e;this._renderer=r,this._items=s,this._container=document.querySelector(t)}renderItems(){this._items.reverse().forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}document.querySelector("#profile-edit-modal");const r=document.querySelector("#profile-edit-button"),i=(document.querySelector("#profile-title"),document.querySelector("#profile-description"),document.querySelector("#edit-avatar-modal-form"),document.querySelector("#profile-title-input")),n=document.querySelector("#profile-description-input"),o=(document.forms["profile-form"],document.querySelector("#add-card-modal"),document.querySelector("#add-button")),a=(document.forms["add-card-form"],document.querySelector("#preview-image-modal"));document.querySelector(".modal__preview-image"),a.querySelector(".modal__preview-caption");class l{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this),this._handleOverlayClick=this._handleOverlayClick.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleOverlayClick(e){e.target===e.currentTarget&&this.close()}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("click",this._handleOverlayClick)}}class d extends l{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._submitButton=this._popupForm.querySelector(".modal__edit-save-button"),this._submitButtonText=this._submitButton.textContent,this._setEventListeners()}_getInputValues(){this._inputElements=this._popupForm.querySelectorAll(".modal__input");const e={};return this._inputElements.forEach((t=>{e[t.name]=t.value})),e}reset(){this._popupForm.reset()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}_setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}}const c=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}addCard(e,t){return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})})}getUser(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}editProfile(e,t){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})})}deleteRequest(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}addLike(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({isLiked:!0})})}removeLike(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers,body:JSON.stringify({isLiked:!1})})}updateAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"73b28af1-3d27-47c6-87e4-d9eade98f6bf","content-type":"application/json"}}),u={};function h(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.renderLoading(!0,s),e().then((()=>{t.close()})).catch(console.error).finally((()=>{t.renderLoading(!1)}))}let _;function m(t){return new e(t,"#card-template",f,k,y).getView()}var p;p={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__edit-save-button",inactiveButtonClass:"modal__edit-save-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(p.formSelector)).forEach((e=>{const s=new t(p,e),r=e.getAttribute("name");u[r]=s,s.enableValidation()})),c.getInitialCards().then((e=>{_=new s({items:e,renderer:e=>{const t=m(e);_.addItem(t)}},".cards__list"),_.renderItems()})).catch((e=>console.error(e)));const E=new d("#add-card-modal",(function(e){const{name:t,link:s}=e;h((function(){return c.addCard(t,s).then((e=>{_.addItem(m(e))})).then((()=>{E.reset(),u["add-card-form"].resetValidation()}))}),E)}));E.setEventListeners(),o.addEventListener("click",(()=>{E.open()}));const v=new class extends l{constructor(e){super({popupSelector:e}),this._imageElement=this._popupElement.querySelector(".modal__preview-image"),this._imageCaption=this._popupElement.querySelector(".modal__preview-caption")}open(e){let{name:t,link:s}=e;this._imageElement.src=s,this._imageElement.alt=t,this._imageCaption.textContent=t,super.open()}}("#preview-image-modal");function f(e,t){v.open({name:e,link:t})}v.setEventListeners();const g=new d("#delete-card-modal",(function(){h((function(){return c.deleteRequest(b).then((()=>{S.remove()}))}),g,"Deleting...")}));let b=null,S=null;function k(e,t){b=e,S=t,g.open()}function y(e,t){return t?c.removeLike(e).then((()=>!1)).catch((e=>console.error("Error removing like:",e))):c.addLike(e).then((()=>!0)).catch((e=>console.error("Error adding like:",e)))}const L=new class{constructor(e,t,s){this._name=document.querySelector(e),this._about=document.querySelector(t),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,about:this._about.textContent}}setUserInfo(e,t){this._name.textContent=e,this._about.textContent=t}setAvatar(e){this._avatar.src=e}}(".profile__title",".profile__description",".profile__image");c.getUser().then((e=>{L.setUserInfo(e.name,e.about),L.setAvatar(e.avatar)})).catch((e=>console.error("Error fetching user data:",e)));const q=new d("#profile-edit-modal",(function(e){const{name:t,about:s}=e;h((function(){return c.editProfile(t,s).then((e=>{L.setUserInfo(e.name,e.about)})).then((()=>{u["profile-edit-form"].resetValidation()}))}),q)}));q.setEventListeners(),r.addEventListener("click",(()=>{const e=L.getUserInfo();i.value=e.name,n.value=e.about,q.open()})),document.querySelector(".profile__image-pencil").addEventListener("click",(e=>{e.target===e.currentTarget&&C.open()}));const C=new d("#edit-avatar-modal",(function(e){let{link:t}=e;h((function(){return c.updateAvatar(t).then((e=>{L.setAvatar(t),C.reset(),u["edit-avatar-form"].disableButton(),u["edit-avatar-form"].resetValidation()}))}),C)}));C.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,