!function(){"use strict";class e{constructor(e,t,r,s,i){this.name=e.name,this.link=e.link,this._cardSelector=t,this._handleImageClick=r,this._cardID=e._id,this._handleDeleteCard=s,this._handleLikeButton=i,this.isLiked=e.isLiked}_setEventListeners(){this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this.isLiked&&this._likeButton.classList.add("card__like-button_active"),this._likeButton.addEventListener("click",(e=>{e.preventDefault(),e.target===this._likeButton&&this._handleLikeButton(this._likeButton,this.isLiked,this._cardID).then((e=>{this.isLiked=e,this._updateLikeButton()})).catch((e=>console.error("Error toggling like:",e)))})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard(this._cardID,this._cardElement)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this.name,this.link)}))}_updateLikeButton(){this.isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._cardImageEl.src=this.link,this._cardImageEl.alt=this.name,this._cardTitleEl.textContent=this.name,this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageEl.textContent="",this._errorMessageEl.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._hasInvalidInput(this._inputEls)?this._disableButton():this._enableButton()}_setEventListeners(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(e)})),this._setEventListeners(),this._toggleButtonState()}resetValidation(){this._toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)}))}}class r{constructor(e,t){let{items:r,renderer:s}=e;this._renderer=s,this._items=r,this._container=document.querySelector(t)}renderItems(){this._items.reverse().forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const s={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__edit-save-button",inactiveButtonClass:"modal__edit-save-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},i=(document.querySelector("#profile-edit-modal"),document.querySelector("#profile-edit-button")),o=(document.querySelector("#profile-title"),document.querySelector("#profile-description"),document.querySelector("#edit-avatar-modal-form")),n=document.querySelector("#profile-title-input"),a=document.querySelector("#profile-description-input"),l=document.forms["profile-form"],d=document.querySelector("#add-card-modal"),c=document.querySelector("#add-button"),h=(document.forms["add-card-form"],document.querySelector("#preview-image-modal"));document.querySelector(".modal__preview-image"),h.querySelector(".modal__preview-caption");class u{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close"),this._handleEscClose=this._handleEscClose.bind(this),this._handleOverlayClick=this._handleOverlayClick.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleOverlayClick(e){e.target===e.currentTarget&&this.close()}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("click",this._handleOverlayClick)}}class _ extends u{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._submitButton=this._popupForm.querySelector(".modal__edit-save-button"),this._submitButtonText=this._submitButton.textContent,this._setEventListeners()}_getInputValues(){this._inputElements=this._popupForm.querySelectorAll(".modal__input");const e={};return this._inputElements.forEach((t=>{e[t.name]=t.value})),e}reset(){this._popupForm.reset()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}_setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}}const m=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUser(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editProfile(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteRequest(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({isLiked:!0})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers,body:JSON.stringify({isLiked:!1})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"73b28af1-3d27-47c6-87e4-d9eade98f6bf","content-type":"application/json"}}),p=new t(s,l),E=new t(s,d);let v;function b(t){return new e(t,"#card-template",k,C,B).getView()}new t(s,o).enableValidation(),p.enableValidation(),E.enableValidation(),m.getInitialCards().then((e=>{v=new r({items:e,renderer:e=>{const t=b(e);v.addItem(t)}},".cards__list"),v.renderItems()})).catch((e=>console.error(e)));const f=new _("#add-card-modal",(function(e){f.renderLoading(!0),m.addCard(e.name,e.link).then((e=>{const t=b(e);v.addItem(t),f.close(),f.reset(),E._disableButton(),f.close()})).catch((e=>{console.error("Error adding card:",e)})).finally((()=>{f.renderLoading(!1)}))}));f.setEventListeners(),c.addEventListener("click",(()=>{f.open(),E._disableButton()}));const g=new class extends u{constructor(e){super({popupSelector:e}),this._imageElement=this._popupElement.querySelector(".modal__preview-image"),this._imageCaption=this._popupElement.querySelector(".modal__preview-caption")}open(e){let{name:t,link:r}=e;this._imageElement.src=r,this._imageElement.alt=t,this._imageCaption.textContent=t,super.open()}}("#preview-image-modal");function k(e,t){g.open({name:e,link:t})}g.setEventListeners();const L=new _("#delete-card-modal",(()=>{m.deleteRequest(S).then((()=>{y.remove(),L.close()})).catch((e=>console.error("Error deleting card:",e)))}));let S=null,y=null;function C(e,t){S=e,y=t,L.open()}function B(e,t,r){return t?m.removeLike(r).then((()=>(e.classList.remove("card__like-button_active"),!1))).catch((e=>console.error("Error removing like:",e))):m.addLike(r).then((()=>(e.classList.add("card__like-button_active"),!0))).catch((e=>console.error("Error adding like:",e)))}const q=new class{constructor(e,t,r){this._name=document.querySelector(e),this._about=document.querySelector(t),this._avatar=document.querySelector(r)}getUserInfo(){return{name:this._name.textContent,about:this._about.textContent}}setUserInfo(e,t){this._name.textContent=e,this._about.textContent=t}setAvatar(e){this._avatar.src=e}}(".profile__title",".profile__description",".profile__image");m.getUser().then((e=>{q.setUserInfo(e.name,e.about),q.setAvatar(e.avatar)})).catch((e=>console.error("Error fetching user data:",e)));const I=new _("#profile-edit-modal",(function(e){I.renderLoading(!0),m.editProfile(e.name,e.about).then((e=>{q.setUserInfo(e.name,e.about),I.close()})).catch((e=>console.error("Error editing profile:",e))).finally((()=>{I.renderLoading(!1)}))}));I.setEventListeners(),i.addEventListener("click",(()=>{const e=q.getUserInfo();n.value=e.name,a.value=e.about,I.open()})),document.querySelector(".profile__image-pencil").addEventListener("click",(e=>{e.target===e.currentTarget&&w.open()}));const w=new _("#edit-avatar-modal",(function(e){let{link:t}=e;w.renderLoading(!0),m.updateAvatar(t).then((e=>{console.log("Avatar updated successfully:",e),q.setAvatar(t),w.close(),w.reset()})).catch((e=>{console.error("Error occurred while updating avatar:",e)})).finally((()=>{w.renderLoading(!1)}))}));w.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,